// üß™ TESTES DA API REST
// Testes b√°sicos dos endpoints principais

const request = require('supertest');
const app = require('../dist/api/server').default;

describe('üåê API REST - Easy Flash Cards', () => {
    
    // üîß Setup e cleanup para evitar Jest pendurado
    beforeAll(() => {
        // Setup adicional se necess√°rio
    });
    
    afterAll(async () => {
        // Cleanup mais robusto - sem necessidade de fechar servidor
        // pois n√£o est√° sendo iniciado nos testes
        
        // Aguarda cleanup adicional
        await new Promise(resolve => setTimeout(resolve, 100));
    });
    
    // üìã Teste da rota raiz
    describe('GET /', () => {
        test('deve retornar informa√ß√µes da API', async () => {
            const response = await request(app)
                .get('/')
                .expect(200)
                .expect('Content-Type', /json/);
            
            expect(response.body.message).toBe('Easy Flash Cards API');
            expect(response.body.version).toBe('1.0.0');
            expect(response.body.endpoints).toBeDefined();
        });
    });

    // üìö Testes de palavras
    describe('GET /api/words', () => {
        test('deve retornar lista de palavras', async () => {
            const response = await request(app)
                .get('/api/words')
                .expect(200)
                .expect('Content-Type', /json/);
            
            expect(response.body.success).toBe(true);
            expect(response.body.words).toBeInstanceOf(Array);
            expect(response.body.count).toBeGreaterThan(0);
        });

        test('deve usar arquivo CSV padr√£o quando n√£o especificado', async () => {
            const response = await request(app)
                .get('/api/words')
                .expect(200);
            
            expect(response.body.success).toBe(true);
            expect(response.body.words).toBeInstanceOf(Array);
        });
    });

    // üé≤ Testes de palavra aleat√≥ria
    describe('GET /api/words/random', () => {
        test('deve retornar uma palavra aleat√≥ria', async () => {
            const response = await request(app)
                .get('/api/words/random')
                .expect(200)
                .expect('Content-Type', /json/);
            
            expect(response.body.success).toBe(true);
            expect(response.body.word).toBeDefined();
            expect(response.body.word.word).toBeDefined();
            expect(response.body.word.meaning).toBeDefined();
        });

        test('deve retornar palavras diferentes em m√∫ltiplas chamadas', async () => {
            const response1 = await request(app).get('/api/words/random');
            const response2 = await request(app).get('/api/words/random');
            
            expect(response1.body.success).toBe(true);
            expect(response2.body.success).toBe(true);
            // Nota: pode ser a mesma palavra por coincid√™ncia, mas estrutura deve ser consistente
            expect(response1.body.word).toBeDefined();
            expect(response2.body.word).toBeDefined();
        });
    });

    // üîç Testes de busca de palavra espec√≠fica
    describe('GET /api/words/:word', () => {
        test('deve encontrar palavra existente', async () => {
            const response = await request(app)
                .get('/api/words/interesting')
                .expect(200)
                .expect('Content-Type', /json/);
            
            expect(response.body.success).toBe(true);
            expect(response.body.word).toBeDefined();
            expect(response.body.word.word).toBe('interesting');
            expect(response.body.word.meaning).toBe('interessante');
        });

        test('deve retornar 404 para palavra n√£o encontrada', async () => {
            const response = await request(app)
                .get('/api/words/palavrainexistente123')
                .expect(404)
                .expect('Content-Type', /json/);
            
            expect(response.body.success).toBe(false);
            expect(response.body.error).toBe('Palavra n√£o encontrada');
            expect(response.body.searchedWord).toBe('palavrainexistente123');
        });
    });

    // ‚ûï Testes de adi√ß√£o de palavra
    describe('POST /api/words', () => {
        test('deve adicionar nova palavra', async () => {
            // Usa timestamp para garantir palavra √∫nica
            const timestamp = Date.now();
            const novaPalavra = {
                word: `testword${timestamp}`,
                meaning: 'palavra de teste'
            };

            const response = await request(app)
                .post('/api/words')
                .send(novaPalavra)
                .expect(201)
                .expect('Content-Type', /json/);
            
            expect(response.body.success).toBe(true);
            expect(response.body.message).toBe('Palavra adicionada com sucesso');
            expect(response.body.word.word).toBe(`testword${timestamp}`);
            expect(response.body.word.meaning).toBe('palavra de teste');
        });

        test('deve rejeitar palavra sem campos obrigat√≥rios', async () => {
            const response = await request(app)
                .post('/api/words')
                .send({ word: 'test' }) // faltando meaning
                .expect(400)
                .expect('Content-Type', /json/);
            
            expect(response.body.success).toBe(false);
            expect(response.body.error).toBe('Campos "word" e "meaning" s√£o obrigat√≥rios');
        });

        test('deve rejeitar palavra vazia', async () => {
            const response = await request(app)
                .post('/api/words')
                .send({})
                .expect(400)
                .expect('Content-Type', /json/);
            
            expect(response.body.success).toBe(false);
            expect(response.body.error).toBe('Campos "word" e "meaning" s√£o obrigat√≥rios');
        });
    });

    // üìä Testes de estat√≠sticas
    describe('GET /api/stats', () => {
        test('deve retornar estat√≠sticas do vocabul√°rio', async () => {
            const response = await request(app)
                .get('/api/stats')
                .expect(200)
                .expect('Content-Type', /json/);
            
            expect(response.body.success).toBe(true);
            expect(response.body.stats).toBeDefined();
            expect(response.body.stats.totalWords).toBeGreaterThan(0);
            expect(response.body.stats.averageWordLength).toBeGreaterThan(0);
            expect(response.body.stats.averageMeaningLength).toBeGreaterThan(0);
            expect(response.body.stats.filePath).toBeDefined();
        });
    });

    // üö´ Testes de rotas n√£o encontradas
    describe('Rotas n√£o encontradas', () => {
        test('deve retornar 404 para rota inexistente', async () => {
            const response = await request(app)
                .get('/api/inexistente')
                .expect(404)
                .expect('Content-Type', /json/);
            
            expect(response.body.success).toBe(false);
            expect(response.body.error).toBe('Endpoint n√£o encontrado');
        });
    });
}); 