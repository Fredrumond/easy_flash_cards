name: 🚀 Deploy & Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20'

jobs:
  # 🏗️ Job 1: Build for Production
  build-production:
    name: 🏗️ Production Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --only=production
        
      - name: 🔍 TypeScript Type Check
        run: npm run type-check
        
      - name: 🏗️ Build TypeScript
        run: npm run build
        
      - name: 🧪 Run production tests
        run: |
          echo "🧪 Testing production build..."
          npm run test
          
      - name: 📊 Optimize build
        run: |
          echo "📊 Build optimization..."
          echo "Removing source maps and dev files..."
          find dist -name "*.map" -delete
          echo "Final build size: $(du -sh dist)"
          
      - name: 📦 Create production package
        run: |
          mkdir -p production-build
          cp -r dist production-build/
          cp package*.json production-build/
          cp README.md production-build/
          
          # Create startup script
          cat > production-build/start.sh << 'EOF'
          #!/bin/bash
          echo "🚀 Starting Easy Flash Cards API..."
          node dist/api/server.js
          EOF
          chmod +x production-build/start.sh
          
          # Create Dockerfile
          cat > production-build/Dockerfile << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY dist ./dist
          EXPOSE 3000
          CMD ["node", "dist/api/server.js"]
          EOF
          
      - name: 📊 Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: production-build/
          retention-days: 90

  # 🐳 Job 2: Docker Build & Push
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: build-production
    if: github.event_name == 'release'
    
    steps:
      - name: 📥 Download production build
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./
          
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 📋 Job 3: Release Notes & Documentation
  release-docs:
    name: 📋 Release Documentation
    runs-on: ubuntu-latest
    needs: build-production
    if: github.event_name == 'release'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📊 Generate release info
        run: |
          echo "# 🎉 Release Information" > RELEASE_INFO.md
          echo "" >> RELEASE_INFO.md
          echo "**Version:** ${{ github.event.release.tag_name }}" >> RELEASE_INFO.md
          echo "**Release Date:** $(date)" >> RELEASE_INFO.md
          echo "**Commit:** ${{ github.sha }}" >> RELEASE_INFO.md
          echo "" >> RELEASE_INFO.md
          echo "## 🔧 Technical Details" >> RELEASE_INFO.md
          echo "- **Node.js Version:** ${{ env.NODE_VERSION }}" >> RELEASE_INFO.md
          echo "- **TypeScript:** 100% Coverage" >> RELEASE_INFO.md
          echo "- **Test Coverage:** $(npm run test:coverage 2>/dev/null | grep -o '[0-9.]*%' | tail -1 || echo 'N/A')" >> RELEASE_INFO.md
          echo "- **Build Size:** $(du -sh dist 2>/dev/null || echo 'N/A')" >> RELEASE_INFO.md
          echo "" >> RELEASE_INFO.md
          echo "## 🚀 Deployment" >> RELEASE_INFO.md
          echo "```bash" >> RELEASE_INFO.md
          echo "# Docker deployment" >> RELEASE_INFO.md
          echo "docker run -p 3000:3000 ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}" >> RELEASE_INFO.md
          echo "" >> RELEASE_INFO.md
          echo "# Node.js deployment" >> RELEASE_INFO.md
          echo "npm install" >> RELEASE_INFO.md
          echo "npm run build" >> RELEASE_INFO.md
          echo "npm start" >> RELEASE_INFO.md
          echo "```" >> RELEASE_INFO.md
          
      - name: 📊 Upload release docs
        uses: actions/upload-artifact@v4
        with:
          name: release-documentation
          path: RELEASE_INFO.md

  # ✅ Job 4: Deployment Summary
  deploy-summary:
    name: ✅ Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-production, docker-build, release-docs]
    if: always()
    
    steps:
      - name: 📊 Deployment Results
        run: |
          echo "🎯 Deployment Summary"
          echo "===================="
          echo "Production Build: ${{ needs.build-production.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Release Docs: ${{ needs.release-docs.result }}"
          echo "===================="
          
          if [[ "${{ needs.build-production.result }}" == "success" ]]; then
            echo "✅ Deployment completed successfully!"
            echo "🚀 Application is ready for production"
            echo "🐳 Docker image: ghcr.io/${{ github.repository }}"
          else
            echo "❌ Deployment failed"
            exit 1
          fi 